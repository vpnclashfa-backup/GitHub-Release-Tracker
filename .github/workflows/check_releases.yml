name: Check Latest Releases

on:
  schedule:
    # اجرای روزانه ساعت ۱۸:۱۵ UTC (مطابق با ۲۱:۴۵ شب به وقت تهران)
    - cron: '15 18 * * *'
  workflow_dispatch: # امکان اجرای دستی

jobs:
  check-releases:
    runs-on: ubuntu-latest
    permissions:
      contents: write # نیاز به دسترسی برای کامیت

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create initial files (if they don't exist)
        run: |
          mkdir -p scripts # اطمینان از وجود پوشه scripts در ریشه
          if [ ! -f repositories.txt ]; then
            echo "https://github.com/actions/checkout" > repositories.txt
            echo "https://github.com/cli/cli" >> repositories.txt
            echo "https://github.com/vpnclashfa-backup/telegram-auto-release" >> repositories.txt
          fi
          if [ ! -f README.md ]; then
            echo "# رهیاب نسخه‌ها" > README.md
            echo "" >> README.md
            echo "لیست آخرین نسخه‌های مخازن مورد نظر:" >> README.md
            echo "" >> README.md
            echo "" >> README.md
            echo "" >> README.md
            echo "" >> README.md
            echo "این مخزن به صورت خودکار به‌روز می‌شود." >> README.md
          fi
          # بررسی وجود فایل پایتون
          if [ ! -f scripts/update_readme.py ]; then
            echo "##### IMPORTANT: You need to ensure scripts/update_readme.py exists! #####"
            exit 1
          fi
        shell: bash

      - name: Check for Latest Releases and Generate Table
        id: check_releases
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          TEMP_OUTPUT="releases_content.md"
          REPO_LIST_FILE="repositories.txt"
          URLS_FILENAME="urls_to_check.txt"
          TELEGRAM_REPO="vpnclashfa-backup/telegram-auto-release"
          TELEGRAM_DOWNLOAD_URL="https://telegram.org/apps"

          echo "**آخرین بررسی:** $(date -u '+%Y-%m-%d %H:%M:%S') UTC" > $TEMP_OUTPUT
          echo "" >> $TEMP_OUTPUT
          echo "| مخزن | آخرین نسخه | لینک نسخه | منبع |" >> $TEMP_OUTPUT
          echo "|---|---|---|---|" >> $TEMP_OUTPUT

          while IFS= read -r repo_url || [[ -n "$repo_url" ]]; do
            if [ -z "$repo_url" ]; then continue; fi
            repo_path=$(echo "$repo_url" | sed -E 's|https?://github.com/||' | sed 's/\.git$//' | sed 's/\/$//')
            repo_name_raw="${repo_path##*/}"
            repo_name_clean=$(echo "$repo_name_raw" | tr -d '_') # <--- **خط جدید: حذف '_' از نام**
            echo "Processing $repo_path..."
            repo_link="[$repo_name_clean]($repo_url)" # <--- **تغییر: استفاده از نام بدون '_'**

            # --- دریافت آخرین نسخه ---
            release_data=$(gh api repos/$repo_path/releases/latest --jq '{tagName: .tag_name, url: .html_url}' 2>/dev/null) || true
            if [ -z "$release_data" ] || [ "$(echo "$release_data" | jq -r '.tagName')" == "null" ]; then
              tag_name="پیدا نشد"
              release_url="#"
            else
              tag_name=$(echo "$release_data" | jq -r '.tagName')
              release_url=$(echo "$release_data" | jq -r '.url')
              echo "  -> Found release: $tag_name"
            fi

            # --- بررسی شرط جدید و جستجو برای منبع ---
            if [ "$repo_path" == "$TELEGRAM_REPO" ]; then
              source_content="[دانلود تلگرام]($TELEGRAM_DOWNLOAD_URL)"
              echo "  -> Special handling for $repo_path."
            else
              source_content="یافت نشد"
              source_url_main="https://raw.githubusercontent.com/$repo_path/main/$URLS_FILENAME"
              source_url_master="https://raw.githubusercontent.com/$repo_path/master/$URLS_FILENAME"
              TMP_URL_FILE="tmp_url.txt"
              fetched_url=""
              http_code_main=$(curl -sSL "$source_url_main" -o $TMP_URL_FILE -w "%{http_code}")
              if [ "$http_code_main" -eq 200 ]; then
                  fetched_url=$(cat $TMP_URL_FILE)
              else
                  http_code_master=$(curl -sSL "$source_url_master" -o $TMP_URL_FILE -w "%{http_code}")
                  if [ "$http_code_master" -eq 200 ]; then
                      fetched_url=$(cat $TMP_URL_FILE)
                  fi
              fi
              rm -f $TMP_URL_FILE
              if [ -n "$fetched_url" ]; then
                  first_line_url=$(echo "$fetched_url" | head -n 1 | tr -d '[:space:]')
                  if [ -n "$first_line_url" ]; then
                      source_content="[لینک منبع]($first_line_url)"
                  else
                      source_content="فایل منبع خالی"
                  fi
              else
                  echo "  -> No $URLS_FILENAME found for $repo_path."
              fi
            fi
            echo "| $repo_link | **$tag_name** | [مشاهده]($release_url) | $source_content |" >> $TEMP_OUTPUT
          done < "$REPO_LIST_FILE"

          echo "" >> $TEMP_OUTPUT
          echo "---" >> $TEMP_OUTPUT
          echo "**نکته:** برای راحت‌تر به‌روز کردن اپلیکیشن‌های اندروید (در صورت وجود)، لینک هر مخزن را در اپلیکیشن [Obtainium](https://github.com/ImranR98/Obtainium) وارد کنید." >> $TEMP_OUTPUT

          echo "✅ Table content generated into $TEMP_OUTPUT."
        shell: bash

      - name: Update README.md using Python script
        run: python scripts/update_readme.py
        shell: bash

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add README.md
          if git diff --staged --quiet; then
            echo "No changes to commit in README.md."
          else
            git commit -m "chore: به‌روزرسانی لیست آخرین نسخه‌ها در README.md"
            git push
          fi
        shell: bash
